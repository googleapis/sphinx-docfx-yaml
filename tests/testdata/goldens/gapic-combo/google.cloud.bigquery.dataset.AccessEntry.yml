### YamlMime:UniversalReference
api_name: []
items:
- attributes: []
  children:
  - google.cloud.bigquery.dataset.AccessEntry.dataset
  - google.cloud.bigquery.dataset.AccessEntry.dataset_target_types
  - google.cloud.bigquery.dataset.AccessEntry.domain
  - google.cloud.bigquery.dataset.AccessEntry.entity_id
  - google.cloud.bigquery.dataset.AccessEntry.entity_type
  - google.cloud.bigquery.dataset.AccessEntry.from_api_repr
  - google.cloud.bigquery.dataset.AccessEntry.group_by_email
  - google.cloud.bigquery.dataset.AccessEntry.role
  - google.cloud.bigquery.dataset.AccessEntry.routine
  - google.cloud.bigquery.dataset.AccessEntry.special_group
  - google.cloud.bigquery.dataset.AccessEntry.to_api_repr
  - google.cloud.bigquery.dataset.AccessEntry.user_by_email
  - google.cloud.bigquery.dataset.AccessEntry.view
  - google.cloud.bigquery.dataset.AccessEntry.__init__
  - google.cloud.bigquery.dataset.AccessEntry
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: AccessEntry
  source:
    id: AccessEntry
    path: tests/testdata/gapic-combo/google/cloud/bigquery/dataset.py
    remote:
      branch: add_goldens
      path: tests/testdata/gapic-combo/google/cloud/bigquery/dataset.py
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: 222
  summary: 'Represents grant of an access role to an entity.


    An entry must have exactly one of the allowed

    xref_EntityTypes. If anything but `view`, `routine`,

    or `dataset` are set, a `role` is also required. `role` is omitted for `view`,

    `routine`, `dataset`, because they are always read-only.


    See https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets.

    '
  syntax:
    content: "AccessEntry(\n    role: typing.Optional[str] = None,\n    entity_type:\
      \ typing.Optional[str] = None,\n    entity_id: typing.Optional[typing.Union[typing.Dict[str,\
      \ typing.Any], str]] = None,\n)"
    exceptions:
    - description: 'If a <code>view</code>, <code>routine</code>, or <code>dataset</code>
        has <code>role</code> set, or a non <code>view</code>, non <code>routine</code>,
        and non <code>dataset</code> **does not** have a <code>role</code> set. ..
        rubric:: Examples >>> entry = AccessEntry(''OWNER'', ''userByEmail'', ''user@example.com'')
        >>> view = { ... ''projectId'': ''my-project'', ... ''datasetId'': ''my_dataset'',
        ... ''tableId'': ''my_table'' ... } >>> entry = AccessEntry(None, ''view'',
        view)'
      var_type: ValueError
    parameters: []
  type: class
  uid: google.cloud.bigquery.dataset.AccessEntry
- &id001
  attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.dataset
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: dataset
  source:
    id: dataset
    path: null
    remote:
      branch: add_goldens
      path: null
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: null
  summary: 'API resource representation of a dataset reference.


    '
  syntax: {}
  type: property
  uid: google.cloud.bigquery.dataset.AccessEntry.dataset
- *id001
- &id002
  attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.dataset_target_types
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: dataset_target_types
  source:
    id: dataset_target_types
    path: null
    remote:
      branch: add_goldens
      path: null
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: null
  summary: 'Which resources that the dataset in this entry applies to.


    '
  syntax: {}
  type: property
  uid: google.cloud.bigquery.dataset.AccessEntry.dataset_target_types
- *id002
- &id003
  attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.domain
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: domain
  source:
    id: domain
    path: null
    remote:
      branch: add_goldens
      path: null
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: null
  summary: 'A domain to grant access to.


    '
  syntax: {}
  type: property
  uid: google.cloud.bigquery.dataset.AccessEntry.domain
- *id003
- &id004
  attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.entity_id
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: entity_id
  source:
    id: entity_id
    path: null
    remote:
      branch: add_goldens
      path: null
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: null
  summary: 'The entity_id of the entry.


    '
  syntax: {}
  type: property
  uid: google.cloud.bigquery.dataset.AccessEntry.entity_id
- *id004
- &id005
  attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.entity_type
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: entity_type
  source:
    id: entity_type
    path: null
    remote:
      branch: add_goldens
      path: null
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: null
  summary: 'The entity_type of the entry.


    '
  syntax: {}
  type: property
  uid: google.cloud.bigquery.dataset.AccessEntry.entity_type
- *id005
- attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.from_api_repr
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: from_api_repr
  source:
    id: from_api_repr
    path: tests/testdata/gapic-combo/google/cloud/bigquery/dataset.py
    remote:
      branch: add_goldens
      path: tests/testdata/gapic-combo/google/cloud/bigquery/dataset.py
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: 479
  summary: 'Factory: construct an access entry given its API representation

    '
  syntax:
    content: 'from_api_repr(resource: dict)'
    exceptions:
    - description: If the resource has more keys than <code>role</code> and one additional
        key.
      var_type: ValueError
    parameters:
    - description: Access entry resource representation returned from the API
      id: resource
      var_type: Dict[str, object]
    returns:
    - description: Access entry parsed from <code>resource</code>.
      var_type: google.cloud.bigquery.dataset.AccessEntry
  type: method
  uid: google.cloud.bigquery.dataset.AccessEntry.from_api_repr
- &id006
  attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.group_by_email
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: group_by_email
  source:
    id: group_by_email
    path: null
    remote:
      branch: add_goldens
      path: null
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: null
  summary: 'An email address of a Google Group to grant access to.


    '
  syntax: {}
  type: property
  uid: google.cloud.bigquery.dataset.AccessEntry.group_by_email
- *id006
- &id007
  attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.role
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: role
  source:
    id: role
    path: null
    remote:
      branch: add_goldens
      path: null
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: null
  summary: 'The role of the entry.


    '
  syntax: {}
  type: property
  uid: google.cloud.bigquery.dataset.AccessEntry.role
- *id007
- &id008
  attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.routine
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: routine
  source:
    id: routine
    path: null
    remote:
      branch: add_goldens
      path: null
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: null
  summary: 'API resource representation of a routine reference.


    '
  syntax: {}
  type: property
  uid: google.cloud.bigquery.dataset.AccessEntry.routine
- *id008
- &id009
  attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.special_group
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: special_group
  source:
    id: special_group
    path: null
    remote:
      branch: add_goldens
      path: null
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: null
  summary: 'A special group to grant access to.


    '
  syntax: {}
  type: property
  uid: google.cloud.bigquery.dataset.AccessEntry.special_group
- *id009
- attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.to_api_repr
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: to_api_repr
  source:
    id: to_api_repr
    path: tests/testdata/gapic-combo/google/cloud/bigquery/dataset.py
    remote:
      branch: add_goldens
      path: tests/testdata/gapic-combo/google/cloud/bigquery/dataset.py
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: 470
  summary: 'Construct the API resource representation of this access entry

    '
  syntax:
    content: to_api_repr()
    parameters: []
    returns:
    - description: Access entry represented as an API resource
      var_type: Dict[str, object]
  type: method
  uid: google.cloud.bigquery.dataset.AccessEntry.to_api_repr
- &id010
  attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.user_by_email
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: user_by_email
  source:
    id: user_by_email
    path: null
    remote:
      branch: add_goldens
      path: null
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: null
  summary: 'An email address of a user to grant access to.


    '
  syntax: {}
  type: property
  uid: google.cloud.bigquery.dataset.AccessEntry.user_by_email
- *id010
- &id011
  attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.view
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: view
  source:
    id: view
    path: null
    remote:
      branch: add_goldens
      path: null
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: null
  summary: 'API resource representation of a view reference.


    '
  syntax: {}
  type: property
  uid: google.cloud.bigquery.dataset.AccessEntry.view
- *id011
- attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry.__init__
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: __init__
  source:
    id: __init__
    path: tests/testdata/gapic-combo/google/cloud/bigquery/dataset.py
    remote:
      branch: add_goldens
      path: tests/testdata/gapic-combo/google/cloud/bigquery/dataset.py
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: 291
  summary: 'Initialize self.  See help(type(self)) for accurate signature.


    '
  syntax:
    content: "__init__(\n    role: typing.Optional[str] = None,\n    entity_type:\
      \ typing.Optional[str] = None,\n    entity_id: typing.Optional[typing.Union[typing.Dict[str,\
      \ typing.Any], str]] = None,\n)"
    parameters: []
  type: method
  uid: google.cloud.bigquery.dataset.AccessEntry.__init__
- attributes: []
  class: google.cloud.bigquery.dataset.AccessEntry
  fullName: google.cloud.bigquery.dataset.AccessEntry
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: google.cloud.bigquery.dataset
  name: AccessEntry
  source:
    id: AccessEntry
    path: tests/testdata/gapic-combo/google/cloud/bigquery/dataset.py
    remote:
      branch: add_goldens
      path: tests/testdata/gapic-combo/google/cloud/bigquery/dataset.py
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: 222
  summary: 'Represents grant of an access role to an entity.


    An entry must have exactly one of the allowed

    xref_EntityTypes. If anything but `view`, `routine`,

    or `dataset` are set, a `role` is also required. `role` is omitted for `view`,

    `routine`, `dataset`, because they are always read-only.


    See https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets.

    '
  syntax:
    content: "AccessEntry(\n    role: typing.Optional[str] = None,\n    entity_type:\
      \ typing.Optional[str] = None,\n    entity_id: typing.Optional[typing.Union[typing.Dict[str,\
      \ typing.Any], str]] = None,\n)"
    exceptions:
    - description: 'If a <code>view</code>, <code>routine</code>, or <code>dataset</code>
        has <code>role</code> set, or a non <code>view</code>, non <code>routine</code>,
        and non <code>dataset</code> **does not** have a <code>role</code> set. ..
        rubric:: Examples >>> entry = AccessEntry(''OWNER'', ''userByEmail'', ''user@example.com'')
        >>> view = { ... ''projectId'': ''my-project'', ... ''datasetId'': ''my_dataset'',
        ... ''tableId'': ''my_table'' ... } >>> entry = AccessEntry(None, ''view'',
        view)'
      var_type: ValueError
    parameters: []
  type: method
  uid: google.cloud.bigquery.dataset.AccessEntry
references:
- fullName: google.cloud.bigquery.dataset.AccessEntry.dataset
  isExternal: false
  name: dataset
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.dataset
- fullName: google.cloud.bigquery.dataset.AccessEntry.dataset_target_types
  isExternal: false
  name: dataset_target_types
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.dataset_target_types
- fullName: google.cloud.bigquery.dataset.AccessEntry.domain
  isExternal: false
  name: domain
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.domain
- fullName: google.cloud.bigquery.dataset.AccessEntry.entity_id
  isExternal: false
  name: entity_id
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.entity_id
- fullName: google.cloud.bigquery.dataset.AccessEntry.entity_type
  isExternal: false
  name: entity_type
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.entity_type
- fullName: google.cloud.bigquery.dataset.AccessEntry.from_api_repr
  isExternal: false
  name: from_api_repr
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.from_api_repr
- fullName: google.cloud.bigquery.dataset.AccessEntry.group_by_email
  isExternal: false
  name: group_by_email
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.group_by_email
- fullName: google.cloud.bigquery.dataset.AccessEntry.role
  isExternal: false
  name: role
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.role
- fullName: google.cloud.bigquery.dataset.AccessEntry.routine
  isExternal: false
  name: routine
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.routine
- fullName: google.cloud.bigquery.dataset.AccessEntry.special_group
  isExternal: false
  name: special_group
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.special_group
- fullName: google.cloud.bigquery.dataset.AccessEntry.to_api_repr
  isExternal: false
  name: to_api_repr
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.to_api_repr
- fullName: google.cloud.bigquery.dataset.AccessEntry.user_by_email
  isExternal: false
  name: user_by_email
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.user_by_email
- fullName: google.cloud.bigquery.dataset.AccessEntry.view
  isExternal: false
  name: view
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.view
- fullName: google.cloud.bigquery.dataset.AccessEntry.__init__
  isExternal: false
  name: __init__
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry.__init__
- fullName: google.cloud.bigquery.dataset.AccessEntry
  isExternal: false
  name: AccessEntry
  parent: google.cloud.bigquery.dataset.AccessEntry
  uid: google.cloud.bigquery.dataset.AccessEntry
