### YamlMime:UniversalReference
api_name: []
items:
- attributes: []
  children:
  - google.cloud.bigquery.format_options.ParquetOptions.enable_list_inference
  - google.cloud.bigquery.format_options.ParquetOptions.enum_as_string
  - google.cloud.bigquery.format_options.ParquetOptions.from_api_repr
  - google.cloud.bigquery.format_options.ParquetOptions.to_api_repr
  class: google.cloud.bigquery.format_options.ParquetOptions
  fullName: google.cloud.bigquery.format_options.ParquetOptions
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: google.cloud.bigquery.format_options
  name: ParquetOptions
  source:
    id: ParquetOptions
    path: tests/testdata/gapic-combo/google/cloud/bigquery/format_options.py
    remote:
      branch: add_goldens
      path: tests/testdata/gapic-combo/google/cloud/bigquery/format_options.py
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: 71
  summary: 'Additional options if the PARQUET source format is used.


    '
  syntax:
    content: ParquetOptions()
    parameters: []
  type: class
  uid: google.cloud.bigquery.format_options.ParquetOptions
- &id001
  attributes: []
  class: google.cloud.bigquery.format_options.ParquetOptions
  fullName: google.cloud.bigquery.format_options.ParquetOptions.enable_list_inference
  langs:
  - python
  module: google.cloud.bigquery.format_options
  name: enable_list_inference
  source:
    id: enable_list_inference
    path: null
    remote:
      branch: add_goldens
      path: null
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: null
  summary: 'Indicates whether to use schema inference specifically for Parquet LIST

    logical type.


    See

    https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#ParquetOptions.FIELDS.enable_list_inference


    '
  syntax: {}
  type: property
  uid: google.cloud.bigquery.format_options.ParquetOptions.enable_list_inference
- *id001
- &id002
  attributes: []
  class: google.cloud.bigquery.format_options.ParquetOptions
  fullName: google.cloud.bigquery.format_options.ParquetOptions.enum_as_string
  langs:
  - python
  module: google.cloud.bigquery.format_options
  name: enum_as_string
  source:
    id: enum_as_string
    path: null
    remote:
      branch: add_goldens
      path: null
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: null
  summary: 'Indicates whether to infer Parquet ENUM logical type as STRING instead
    of

    BYTES by default.


    See

    https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#ParquetOptions.FIELDS.enum_as_string


    '
  syntax: {}
  type: property
  uid: google.cloud.bigquery.format_options.ParquetOptions.enum_as_string
- *id002
- attributes: []
  class: google.cloud.bigquery.format_options.ParquetOptions
  fullName: google.cloud.bigquery.format_options.ParquetOptions.from_api_repr
  langs:
  - python
  module: google.cloud.bigquery.format_options
  name: from_api_repr
  source:
    id: from_api_repr
    path: tests/testdata/gapic-combo/google/cloud/bigquery/format_options.py
    remote:
      branch: add_goldens
      path: tests/testdata/gapic-combo/google/cloud/bigquery/format_options.py
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: 108
  summary: 'Factory: construct an instance from a resource dict.

    '
  syntax:
    content: 'from_api_repr(resource: typing.Dict[str, bool])'
    parameters:
    - description: Definition of a <code>.format_options.ParquetOptions</code> instance
        in the same representation as is returned from the API.
      id: resource
      var_type: Dict[str, bool]
    returns:
    - description: Configuration parsed from <code>resource</code>.
      var_type: <code>.format_options.ParquetOptions</code>
  type: method
  uid: google.cloud.bigquery.format_options.ParquetOptions.from_api_repr
- attributes: []
  class: google.cloud.bigquery.format_options.ParquetOptions
  fullName: google.cloud.bigquery.format_options.ParquetOptions.to_api_repr
  langs:
  - python
  module: google.cloud.bigquery.format_options
  name: to_api_repr
  source:
    id: to_api_repr
    path: tests/testdata/gapic-combo/google/cloud/bigquery/format_options.py
    remote:
      branch: add_goldens
      path: tests/testdata/gapic-combo/google/cloud/bigquery/format_options.py
      repo: git@github.com:googleapis/sphinx-docfx-yaml.git
    startLine: 125
  summary: 'Build an API representation of this object.

    '
  syntax:
    content: to_api_repr()
    parameters: []
    returns:
    - description: A dictionary in the format used by the BigQuery API.
      var_type: Dict[str, bool]
  type: method
  uid: google.cloud.bigquery.format_options.ParquetOptions.to_api_repr
references:
- fullName: google.cloud.bigquery.format_options.ParquetOptions.enable_list_inference
  isExternal: false
  name: enable_list_inference
  parent: google.cloud.bigquery.format_options.ParquetOptions
  uid: google.cloud.bigquery.format_options.ParquetOptions.enable_list_inference
- fullName: google.cloud.bigquery.format_options.ParquetOptions.enum_as_string
  isExternal: false
  name: enum_as_string
  parent: google.cloud.bigquery.format_options.ParquetOptions
  uid: google.cloud.bigquery.format_options.ParquetOptions.enum_as_string
- fullName: google.cloud.bigquery.format_options.ParquetOptions.from_api_repr
  isExternal: false
  name: from_api_repr
  parent: google.cloud.bigquery.format_options.ParquetOptions
  uid: google.cloud.bigquery.format_options.ParquetOptions.from_api_repr
- fullName: google.cloud.bigquery.format_options.ParquetOptions.to_api_repr
  isExternal: false
  name: to_api_repr
  parent: google.cloud.bigquery.format_options.ParquetOptions
  uid: google.cloud.bigquery.format_options.ParquetOptions.to_api_repr
